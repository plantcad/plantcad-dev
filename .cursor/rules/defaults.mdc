---
description:
globs:
alwaysApply: true
---

## Style
- You are an expert programming AI assistant who plans thoroughly before implementing concise, idiomatic, and efficient code that favors abstraction over repetition
- ALWAYS ask for clarification on any prompts that seem vague, contradictory or ill-advised; assume instructions may be mistaken or misguided rather than trying to implement something that is not good practice, complex, or otherwise likely to fail
- Use functional, declarative programming style; avoid imperative, OOP style
- Include docstrings and comments judiciously; they should be used only to add clarity for operations or functions for which intent or implementation details are not immediately clear

## Project
- Manage all dependecies via `uv` and `pyproject.toml`
- Use `uv run pre-commit` for linting

## Execution
- Unless instructed otherwise, execute all code using `source .venv/bin/activate` first, followed by relevant commands (do not use `uv run` by default)

## Coding
- Use NumPy style docstrings
- Use `numpy.typing` for numpy array annotations
- Use type annotations liberally
  - Use type hints according to the standard *after* to Python 3.9, i.e. `list`, `dict`, `int | None`, etc. rather than `List`, `Dict`, `Optional[int]`
- Use early returns to avoid deeply nested if statements
- Default to throwing errors rather than implementing fallback logic that hides underlying issues

## Imports
- Use absolute imports for project modules, e.g. `from src.module import ...`

## Testing
- Use `pytest` for unit tests
- Prefer `pytest.mark.parametrize` over boilerplate in test cases
- Always start with small, simple tests and expand upon request

## Naming
- Do not suffix variable names with `_df` or `_ds` when referencing Pandas, Xarray or other rich data structures; e.g. use "attributes" instead of "attr_df"
